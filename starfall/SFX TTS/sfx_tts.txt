--@name SFX TTS
--@author Bonyoze
--@shared

-- v1.0.1 12/25/2022

local HIDE_CHAT = false -- true/false

-- voice settings
local TTS_MODE = 0 -- which TTS voice api should be used (Oddcast = 0, DECTalk = 1, Tik Tok = 2)
local VOLUME = 10 -- 0 - 10
local PITCH = 1 -- 0 - 100

-- Oddcast settings
-- https://pastebin.com/gysiJGGH
-- im too lazy to organize all the voices into a nice spreadsheet right now
local ODDCAST_ENGINE = 4
local ODDCAST_VOICE = 5
local ODDCAST_LANG = 1

-- Tik Tok settings (ACCOUNT REQUIRED)
-- https://pastebin.com/kJYDfKdP
-- please do not paste your session id in this script, instead paste it in a file relative to data/sf_filedata
local TIKTOK_SESSION_FILE = "tiktok_sessionid.txt"
local TIKTOK_VOICE = "en_us_001"

-- probably shouldn't modify these
local DIR = "sfx_tts" -- directory for the script (relative to data/sf_filedata)
local SIGNATURE = "garry" -- unique string prepended to the temp file name (can be anything)
local BASS_MAX = 20 -- max amount of bass objects at once before they queue (20 is the default for sf_bass_max_cl)

if SERVER then
    local audioCache = {}
    
    local streamQueue, awaitingReqs, requests = {}, {}, {}
    
    function handleFileSending()
        for k, v in pairs(awaitingReqs) do
            if not audioCache[k] then return end
        
            local clients = {}
            
            for kk, vv in pairs(v) do -- take out ready clients
                if not vv:isValid() then
                    table.remove(v, kk)
                elseif vv.ready then
                    table.insert(clients, vv)
                    table.remove(v, kk)
                    vv.ready = false
                end
            end
            
            if #clients > 0 then
                local fileInfo = bit.compress(k)
                
                net.start("fileInfo")
                    net.writeData(fileInfo, #fileInfo)
                net.send(clients, false)
                
                net.start("fileData")
                    net.writeStream(audioCache[k])
                net.send(clients, false)
            end
        end
    end
    
    hook.add("PlayerSay", "", function(ply, text)
        if ply == owner() then
            net.start("say")
                net.writeString(text)
            net.send(owner(), false)
            if HIDE_CHAT then return "" end
        end
    end)
    
    net.receive("tts", function(len)
        net.start("tts")
            net.writeData(net.readData(len), len)
        net.send(find.allPlayers(), false)
    end)
    
    net.receive("request", function(len, ply)
        local data = net.readData(len)
        
        local tbl = bit.stringToTable(bit.decompress(data))
        
        for k, v in pairs(tbl) do
            if not awaitingReqs[v] and not requests[v] then
                requests[v] = true
            end
                
            if not awaitingReqs[v] then
                awaitingReqs[v] = {}
            end
            table.insert(awaitingReqs[v], ply)
        end
    end)
    
    local lastFileName
    
    net.receive("fileInfo", function(len)
        lastFileName = bit.decompress(net.readData(len))
    end)
    
    net.receive("fileData", function(len)
        net.readStream(function(stream)
            audioCache[lastFileName] = stream
            
            handleFileSending()
            
            net.start("ready")
            net.send(owner(), false)
        end)
    end)
    
    net.receive("ready", function(_, ply)
        ply.ready = true
    end)
    
    timer.create("handleReqs", 0, 0, function()
        local reqs = table.getKeys(requests)
        if #reqs == 0 then return end
        
        local req = reqs[1]
        if audioCache[req] then
            handleFileSending()
        else
            local data = bit.compress(req)
            
            net.start("request")
                net.writeData(data, #data)
            net.send(owner(), false)
        end
        
        requests[req] = nil
    end)
    
    timer.create("handleFileSending", 0, 0, handleFileSending)
    
    net.receive("test", function(len, ply)
        print(ply, net.readString())
    end)
else
    local ttsQueue, bassQueue = {}, {}
    
    local function playNextInQueue()
        if #bassQueue == 0 then return end
            
        local item = bassQueue[1]
        
        local function handleBass(snd, err, msg)
            if snd then
                snd:setPos(owner():getPos())
                snd:setVolume(VOLUME)
                snd:setPitch(PITCH)
                snd:play()
                     
                timer.simple(snd:getLength() * (1 / PITCH) / 1.25, function()
                    playNextInQueue()
                end)
                    
                timer.simple(snd:getLength() * (1 / PITCH), function()
                    snd:stop()
                end)
            else
                print("BASS ERROR: ", err, msg)
                playNextInQueue()
            end
        end
        
        local filePath
        
        if player() == owner() and file.exists(DIR .. "/samples/" .. item .. ".mp3") then
            filePath = "data/sf_filedata/" .. DIR .. "/samples/" .. item .. ".mp3"
        else
            filePath = file.existsTemp(SIGNATURE .. "_" .. item .. ".mp3")
        end
        
        bass.loadFile(filePath, "3d", handleBass)
        
        table.remove(bassQueue, 1)
    end
    
    local function listMissingAudio(data)
        local hash = {}
            
        for k, v in pairs(data) do
            if not hash[v] and not (player() == owner() and file.exists(DIR .. "/samples/" .. v .. ".mp3")) and not file.existsTemp(SIGNATURE .. "_" .. v .. ".mp3") then
                hash[v] = true
            end
        end
        
        return table.getKeys(hash)
    end
    
    local function handleTTS()
        if #ttsQueue == 0 then return end
            
        local item = ttsQueue[1]
        
        if #listMissingAudio(item) != 0 then return end
        
        table.add(bassQueue, item)
            
        if bass.soundsLeft() == BASS_MAX then
            playNextInQueue()
        end
            
        table.remove(ttsQueue, 1)
    end

    if player() == owner() then
        file.createDir(DIR)
        file.createDir(DIR .. "/samples")
        if not file.exists(DIR .. "/aliases.json") then file.write(DIR .. "/aliases.json", json.encode({}, true)) end
        
        local aliasData, aliasList, aliasLookup = json.decode(file.read(DIR .. "/aliases.json")), {}, {}
        
        for k, v in pairs(aliasData) do -- reformat alias data
            for kk, vv in ipairs(v) do
                table.insert(aliasList, "" .. vv)
                aliasLookup[string.lower(vv)] = "" .. k
            end
        end
        
        table.sort(aliasList, function(a, b) return #a > #b end)
        
        local canStream = true
        local httpQueue, streamQueue, fileRequests = {}, {}, {}
        
        local function generateVoiceHash(text)
            local salt = ""
            if TTS_MODE == 0 then
                salt = "oddcast" .. ODDCAST_ENGINE .. ODDCAST_VOICE .. ODDCAST_LANG
            elseif TTS_MODE == 1 then
                salt = "dectalk"
            elseif TTS_MODE == 2 then
                salt = "tiktok" .. TIKTOK_VOICE
            else
                error("unknown TTS mode")
            end
            -- unique to avoid using the wrong file when tts mode is changed
            return bit.sha256(text .. salt)
        end
        
        local oddcastURL = "https://cache-a.oddcast.com/c_fs/"
        local dectalkURL = "https://tts.cyzon.us/tts" -- thanks cyzon
        local tiktokURL = "https://tiktok-tts-api.glitch.me/" -- setup by Bonyoze :)
        -- (you can remix the Glitch project and change the url here if the traffic gets too bad)
        
        local tiktokSession = file.read(TIKTOK_SESSION_FILE)
        
        -- ping Glitch project so the first Tik Tok tts usage isn't super delayed
        if TTS_MODE == 2 then
            print("Preparing Tik Tok TTS project")
            http.get(tiktokURL,
                function()
                    print("Tik Tok TTS is ready")
                end,
                function(err)
                    print("Failed to ping Tik Tok TTS project")
                    print("HTTP ERROR: ", err)
                end
            )
        end
        
        local function buildVoiceURL(text)
            if TTS_MODE == 0 then -- Oddcast
                local fragments = {
                    "<engineID>" .. ODDCAST_ENGINE .. "</engineID>",
                    "<voiceID>" .. ODDCAST_VOICE .. "</voiceID>",
                    "<langID>" .. ODDCAST_LANG .. "</langID>",
                    "<ext>mp3</ext>",
                    text
                }
                return oddcastURL
                    .. bit.md5(table.concat(fragments, ""))
                    ..  ".mp3?engine=" .. ODDCAST_ENGINE
                    .. "&voice=" .. ODDCAST_VOICE
                    .. "&language=" .. ODDCAST_LANG
                    .. "&text=" .. http.urlEncode(text)
            elseif TTS_MODE == 1 then -- DECTalk
                return dectalkURL
                    .. "?text=" .. http.urlEncode(text)
            elseif TTS_MODE == 2 then -- Tik Tok
                return tiktokURL
                    .. "?session=" .. http.urlEncode(tiktokSession)
                    .. "&voice=" .. http.urlEncode(TIKTOK_VOICE)
                    .. "&text=" .. http.urlEncode(text)
            else
                error("unknown TTS mode")
            end
        end
        
        function handleStreams()
            if #streamQueue == 0 or not canStream then return end
            
            local name = streamQueue[1]
            
            local fileInfo, fileData = bit.compress(name), file.read(DIR .. "/samples/" .. name .. ".mp3") or file.readTemp(SIGNATURE .. "_" .. name .. ".mp3")
            
            net.start("fileInfo")
                net.writeData(fileInfo, #fileInfo)
            net.send(nil, false)
            
            net.start("fileData")
                net.writeStream(fileData)
            net.send(nil, false)
            
            table.remove(streamQueue, 1)
            canStream = false
        end
        
        local function checkFileReq(name)
            for k, v in pairs(fileRequests) do
                if v == name then
                    table.insert(streamQueue, v)
                    table.remove(fileRequests, k)
                    handleStreams()
                    return
                end
            end
        end
        
        function handleHttpReqs()
            if #httpQueue == 0 or not http.canRequest() then return end
            
            local item = httpQueue[1]
            
            http.get(buildVoiceURL(item.text),
                function(body)
                    file.writeTemp(SIGNATURE .. "_" .. item.hash .. ".mp3", body)
                    
                    checkFileReq(item.hash)
                    handleHttpReqs()
                end,
                function(err)
                    print("HTTP ERROR: ", err)
                    handleHttpReqs()
                end
            )
            
            table.remove(httpQueue, 1)
        end
        
        local function parseText(text)
            local samples = {}
            for k, v in ipairs(aliasList) do
                local pos
                repeat
                    pos = string.find(string.lower(text), string.lower(v), 0, true)
                    if pos then
                        text = string.sub(text, 0, pos - 1) .. string.rep(" ", #v) .. string.sub(text, pos + #v)
                        table.insert(samples, {
                            str = v,
                            pos = pos
                        })
                    end
                until not pos
            end
            
            table.sort(samples, function(a, b) return a.pos < b.pos end)
            
            local textLen = #text
            local list = {}
            for k, v in ipairs(samples) do
                local before = string.trim(string.sub(text, 0, v.pos - 1 - (textLen - #text)))
                
                if #before > 0 then
                    table.insert(list, {
                        type = "voice",
                        hash = generateVoiceHash(before),
                        text = before
                    })
                end
                table.insert(list, {
                    type = "sample",
                    name = aliasLookup[v.str]
                })
                
                text = string.sub(text, v.pos - (textLen - #text) + #v.str)
            end
            
            local last = string.trim(text)
            if #last > 0 then
                table.insert(list, {
                    type = "voice",
                    hash = generateVoiceHash(last),
                    text = last
                })
            end
            
            return list
        end
        
        local function tts(text)
            local parsed = parseText(text)
            
            for k, v in pairs(parsed) do
                if v.type == "voice" and not file.existsTemp(SIGNATURE .. "_" .. v.hash .. ".mp3") then
                    table.insert(httpQueue, v)
                    handleHttpReqs()
                end
                -- simplify values for the net message data
                parsed[k] = v.name or v.hash
            end
            
            local data = bit.compress(bit.tableToString(parsed))
            
            net.start("tts")
                net.writeData(data, #data)
            net.send(nil, false)
        end
        
        net.receive("say", function()
            tts(net.readString())
        end)
        
        net.receive("request", function(len)
            local data = bit.decompress(net.readData(len))
            
            if file.exists(DIR .. "/samples/" .. data .. ".mp3") or file.existsTemp(SIGNATURE .. "_" .. data .. ".mp3") then
                table.insert(streamQueue, data)
                handleStreams()
            else
                table.insert(fileRequests, data)
            end
        end)
        
        net.receive("ready", function()
            canStream = true
        end)
    else
        local lastFileName
    
        net.receive("fileInfo", function(len)
            lastFileName = bit.decompress(net.readData(len))
        end)
        
        net.receive("fileData", function(len)
            net.readStream(function(stream)
                file.writeTemp(SIGNATURE .. "_" .. lastFileName .. ".mp3", stream)
                
                net.start("ready")
                net.send(nil, false)
            end)
        end)
        
        net.start("ready")
        net.send(nil, false)
    end
    
    timer.create("handleQueues", 0, 0, function()
        if player() == owner() then
            handleStreams()
            handleHttpReqs()
        end
        handleTTS()
    end)
    
    net.receive("tts", function(len)
        local data = bit.stringToTable(bit.decompress(net.readData(len)))
        
        table.insert(ttsQueue, data)
        handleTTS()
        
        if player() != owner() then
            local missingList = listMissingAudio(data)
            
            if #missingList > 0 then
                local missingData = bit.compress(bit.tableToString(missingList))
                    
                net.start("request")
                    net.writeData(missingData, #missingData)
                net.send(nil, false)
            end
        end
    end)
end
